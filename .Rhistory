freq(filtered_LFS19$moved, w = filtered_LFS19$weight19)
options(frequency_open_output = TRUE)
freq(filtered_LFS99$moved)
freq(filtered_LFS19$moved)
crosstab(filtered_LFS99$sex, filtered_LFS99$moved, weight=filtered_LFS99$weight99, prop.r = T)
crosstab(filtered_LFS19$sex, filtered_LFS19$moved, weight=filtered_LFS19$weight19, prop.r = T)
# Step 1. Compute mobility rates for gender using crosstab and row proportions
tabplot_99 <- crosstab(clean_LFS99$sex, clean_LFS99$moved,
w = clean_LFS99$weight99, prop.r = T, plot = F)
# Step 1. Compute mobility rates for gender using crosstab and row proportions
tabplot_99 <- crosstab(filtered_LFS99$sex, filtered_LFS99$moved,
w = filtered_LFS99$weight99, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_sexmob_99 <- as.data.frame(tabplot_99$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_sexmob_99 <- tabplot_sexmob_99 %>%
filter(tabplot_sexmob_99$filtered_LFS99.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_sexmob_99, aes(x = filtered_LFS99.sex)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Gender moved",
x = "Gender",
y = "Frequency")
# Step 1. Compute mobility rates for gender using crosstab and row proportions
tabplot_19 <- crosstab(filtered_LFS19$sex, filtered_LFS19$moved,
w = filtered_LFS19$weight19, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_sexmob_19 <- as.data.frame(tabplot_19$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_sexmob_19 <- tabplot_sexmob_19 %>%
filter(tabplot_sexmob_19$filtered_LFS19.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_sexmob_19, aes(x = filtered_LFS19.sex)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Gender moved in 2019",
x = "Gender",
y = "Frequency")
crosstab(filtered_LFS99$ilodefr, filtered_LFS99$moved, weight=filtered_LFS99$weight99, prop.r = T)
crosstab(filtered_LFS19$ilodefr, filtered_LFS19$moved, weight=filtered_LFS19$weight19, prop.r = T)
# Step 1. Compute mobility rates for employment using crosstab and row proportions
tabplot_99_2 <- crosstab(filtered_LFS99$ilodefr, filtered_LFS99$moved,
w = filtered_LFS99$weight99, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_employmob_99 <- as.data.frame(tabplot_99_2$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_employmob_99 <- tabplot_employmob_99 %>%
filter(tabplot_employmob_99$filtered_LFS99.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_employmob_99, aes(x = filtered_LFS99.sex)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Employment moved in 1999",
x = "Employment",
y = "Frequency")
#1999
# Step 1. Compute mobility rates for employment using crosstab and row proportions
tabplot_99_2 <- crosstab(filtered_LFS99$ilodefr, filtered_LFS99$moved,
w = filtered_LFS99$weight99, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_employmob_99 <- as.data.frame(tabplot_99_2$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_employmob_99 <- tabplot_employmob_99 %>%
filter(tabplot_employmob_99$filtered_LFS99.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_employmob_99, aes(x = filtered_LFS99.ilodefr)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Employment moved in 1999",
x = "Employment",
y = "Frequency")
# Step 1. Compute mobility rates for employment using crosstab and row proportions
tabplot_19_2 <- crosstab(filtered_LFS19$ilodefr, filtered_LFS19$moved,
w = filtered_LFS19$weight19, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_employmob_19 <- as.data.frame(tabplot_19_2$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_employmob_19 <- tabplot_employmob_19 %>%
filter(tabplot_employmob_19$filtered_LFS19.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_employmob_19, aes(x = filtered_LFS19.ilodefr)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Employment moved in 2019",
x = "Employment",
y = "Frequency")
crosstab(filtered_LFS99$mardy, filtered_LFS99$moved, weight=filtered_LFS99$weight99, prop.r = T)
crosstab(filtered_LFS19$mardy, filtered_LFS19$moved, weight=filtered_LFS19$weight19, prop.r = T)
# Step 1. Compute mobility rates for employment using crosstab and row proportions
tabplot_19_3 <- crosstab(filtered_LFS19$mardy, filtered_LFS19$moved,
w = filtered_LFS19$weight19, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_marmob_19 <- as.data.frame(tabplot_19_3$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_marmob_19 <- tabplot_marmob_19 %>%
filter(tabplot_marmob_19$filtered_LFS19.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_marmob_19, aes(x = filtered_LFS19.mardy)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Marriage moved in 2019",
x = "Marraige",
y = "Frequency")
crosstab(filtered_LFS99$tenure, filtered_LFS99$moved, weight=filtered_LFS99$weight99, prop.r = T)
crosstab(filtered_LFS19$tenure, filtered_LFS19$moved, weight=filtered_LFS19$weight19, prop.r = T)
# Step 1. Compute mobility rates for tenure using crosstab and row proportions
tabplot_19 <- crosstab(filtered_LFS19$tenure, filtered_LFS19$moved,
w = filtered_LFS19$weight19, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_tenuremob_19 <- as.data.frame(tabplot_19$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_tenuremob_19 <- tabplot_tenuremob_19 %>%
filter(tabplot_tenuremob_19$filtered_LFS19.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_tenuremob_19, aes(x = filtered_LFS19.sex)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Tenure moved in 2019",
x = "Tenure",
y = "Frequency")
# Step 1. Compute mobility rates for tenure using crosstab and row proportions
tabplot_99 <- crosstab(filtered_LFS99$tenure, filtered_LFS99$moved,
w = filtered_LFS99$weight99, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_tenuremob_99 <- as.data.frame(tabplot_99$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_tenuremob_99 <- tabplot_tenuremob_99 %>%
filter(tabplot_tenuremob_99$filtered_LFS99.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_tenuremob_99, aes(x = filtered_LFS99.sex)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Tenure moved in 1999",
x = "Tenure",
y = "Frequency")
#2019
# Step 1. Compute mobility rates for tenure using crosstab and row proportions
tabplot_19 <- crosstab(filtered_LFS19$tenure, filtered_LFS19$moved,
w = filtered_LFS19$weight19, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_tenuremob_19 <- as.data.frame(tabplot_19$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_tenuremob_19 <- tabplot_tenuremob_19 %>%
filter(tabplot_tenuremob_19$filtered_LFS19.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_tenuremob_19, aes(x = filtered_LFS19.tenure)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Tenure moved in 2019",
x = "Tenure",
y = "Frequency")
# Step 1. Compute mobility rates for tenure using crosstab and row proportions
tabplot_99 <- crosstab(filtered_LFS99$tenure, filtered_LFS99$moved,
w = filtered_LFS99$weight99, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_tenuremob_99 <- as.data.frame(tabplot_99$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_tenuremob_99 <- tabplot_tenuremob_99 %>%
filter(tabplot_tenuremob_99$filtered_LFS99.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_tenuremob_99, aes(x = filtered_LFS99.tenure)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Tenure moved in 1999",
x = "Tenure",
y = "Frequency")
freq(filtered_LFS99$moved, w = filtered_LFS99$weight99)
options(frequency_open_output = TRUE)
freq(filtered_LFS19$moved, w = filtered_LFS19$weight19)
options(frequency_open_output = TRUE)
freq(filtered_LFS99$moved)
freq(filtered_LFS19$moved)
crosstab(filtered_LFS99$tenure, filtered_LFS99$moved, weight=filtered_LFS99$weight99, prop.r = T)
crosstab(filtered_LFS19$tenure, filtered_LFS19$moved, weight=filtered_LFS19$weight19, prop.r = T)
#1999
# Step 1. Compute mobility rates for tenure using crosstab and row proportions
tabplot_99 <- crosstab(filtered_LFS99$tenure, filtered_LFS99$moved,
w = filtered_LFS99$weight99, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_tenuremob_99 <- as.data.frame(tabplot_99$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_tenuremob_99 <- tabplot_tenuremob_99 %>%
filter(tabplot_tenuremob_99$filtered_LFS99.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_tenuremob_99, aes(x = filtered_LFS99.tenure)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Tenure moved in 1999",
x = "Tenure",
y = "Frequency")
tenant_LFS99 <- filtered_LFS99 %>% filter(moved != "Missing")
tenant_LFS19 <- filtered_LFS19 %>% filter(moved != "Missing")
crosstab(tenant_LFS99$tenure, tenant_LFS99$moved, weight=tenant_LFS99$weight99, prop.r = T)
crosstab(tenant_LFS19$tenure, tenant_LFS19$moved, weight=tenant_LFS19$weight19, prop.r = T)
tenant_LFS99 <- filtered_LFS99 %>% filter(tenure != "Missing")
tenant_LFS19 <- filtered_LFS19 %>% filter(tenure != "Missing")
crosstab(tenant_LFS99$tenure, tenant_LFS99$moved, weight=tenant_LFS99$weight99, prop.r = T)
crosstab(tenant_LFS19$tenure, tenant_LFS19$moved, weight=tenant_LFS19$weight19, prop.r = T)
# Step 1. Compute mobility rates for tenure using crosstab and row proportions
tabplot_99 <- crosstab(tenure_LFS99$tenure, tenure_LFS99$moved,
w = tenure_LFS99$weight99, prop.r = T, plot = F)
# Step 1. Compute mobility rates for tenure using crosstab and row proportions
tabplot_99 <- crosstab(tenant_LFS99$tenure, tenant_LFS99$moved,
w = tenant_LFS99$weight99, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_tenuremob_99 <- as.data.frame(tabplot_99$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_tenuremob_99 <- tabplot_tenuremob_99 %>%
filter(tabplot_tenuremob_99$tenant_LFS99.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_tenuremob_99, aes(x = tenant_LFS99.tenure)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Tenure moved in 1999",
x = "Tenure",
y = "Frequency")
# Step 1. Compute mobility rates for tenure using crosstab and row proportions
tabplot_19 <- crosstab(tenant_LFS19$tenure, tenant_LFS19$moved,
w = tenant_LFS19$weight19, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_tenuremob_19 <- as.data.frame(tabplot_19$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_tenuremob_19 <- tabplot_tenuremob_19 %>%
filter(tabplot_tenuremob_19$tenant_LFS19.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_tenuremob_19, aes(x = tenant_LFS19.tenure)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Tenure moved in 2019",
x = "Tenure",
y = "Frequency")
crosstab(filtered_LFS99$ilodefr, filtered_LFS99$moved, weight=filtered_LFS99$weight99, prop.r = T)
crosstab(filtered_LFS19$ilodefr, filtered_LFS19$moved, weight=filtered_LFS19$weight19, prop.r = T)
# Step 1. Compute mobility rates for employment using crosstab and row proportions
tabplot_99_2 <- crosstab(filtered_LFS99$ilodefr, filtered_LFS99$moved,
w = filtered_LFS99$weight99, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_employmob_99 <- as.data.frame(tabplot_99_2$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_employmob_99 <- tabplot_employmob_99 %>%
filter(tabplot_employmob_99$filtered_LFS99.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_employmob_99, aes(x = filtered_LFS99.ilodefr)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Employment moved in 1999",
x = "Employment",
y = "Frequency")
# Step 1. Compute mobility rates for employment using crosstab and row proportions
tabplot_19_2 <- crosstab(filtered_LFS19$ilodefr, filtered_LFS19$moved,
w = filtered_LFS19$weight19, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_employmob_19 <- as.data.frame(tabplot_19_2$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_employmob_19 <- tabplot_employmob_19 %>%
filter(tabplot_employmob_19$filtered_LFS19.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_employmob_19, aes(x = filtered_LFS19.ilodefr)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Employment moved in 2019",
x = "Employment",
y = "Frequency")
crosstab(filtered_LFS99$mardy, filtered_LFS99$moved, weight=filtered_LFS99$weight99, prop.r = T)
crosstab(filtered_LFS19$mardy, filtered_LFS19$moved, weight=filtered_LFS19$weight19, prop.r = T)
# Step 1. Compute mobility rates for marriage using crosstab and row proportions
tabplot_99_3 <- crosstab(filtered_LFS99$mardy, filtered_LFS99$moved,
w = filtered_LFS99$weight99, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_marmob_99 <- as.data.frame(tabplot_99_3$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_marmob_99 <- tabplot_marmob_99 %>%
filter(tabplot_marmob_99$filtered_LFS99.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_marmob_99, aes(x = filtered_LFS99.mardy)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Marriage moved in 1999",
x = "Marriage",
y = "Frequency")
# Step 1. Compute mobility rates for employment using crosstab and row proportions
tabplot_19_3 <- crosstab(filtered_LFS19$mardy, filtered_LFS19$moved,
w = filtered_LFS19$weight19, prop.r = T, plot = F)
# 2. Export rates as % to a data frame
tabplot_marmob_19 <- as.data.frame(tabplot_19_3$prop.row*100)
# 3. Keep only percent moved (the %>% pipe function requires dplyr)
tabplot_marmob_19 <- tabplot_marmob_19 %>%
filter(tabplot_marmob_19$filtered_LFS19.moved == "Moved")
#plot graph
library(ggplot2)
ggplot(tabplot_marmob_19, aes(x = filtered_LFS19.mardy)) +
geom_bar(aes(y = Freq), stat = "identity") +
labs(title = "Marriage moved in 2019",
x = "Marraige",
y = "Frequency")
setwd("C:/Users/USUARIO/Documents/UCL/Term 2/GEOG0149/week 4")
install.packages("descr")
library(descr)
library(descr)
ukhls <- read.csv("UKHLS_prac.csv")
rm(tabplot_employmob_19, tabplot_employmob_99, tabplot_marmob_19, tabplot_marmob_99, tabplot_sexmob_19, tabplot_sexmob_19)
rm(LFS19, LFS99)
rm(filtered_LFS19, filtered_LFS99)
rm(tabplot_sexmob_99, tabplot_tenuremob_19, tabplot_tenuremob_99)
rm(moved_1999, moved_2019)
rm(tenant_LFS19, tenant_LFS99)
rm(tabplot_19, tabplot_19_2, tabplot_19_3, tabplot_99)
rm(tabplot_99_2, tabplot_99_3)
View(ukhls)
table(ukhls$wave)
ggplot(ukhls, aes(wave)) + geom_bar(fill = "navy")
install.packages("dplyr")
library(dplyr)
library(ggplot2)
install.packages("descr")
library(descr)
table(ukhls$wave)
ggplot(ukhls, aes(wave)) + geom_bar(fill = "navy")
labs(x = "Wave", y = "Count")
scale_x_continuous(breaks = seq(1,9,1))
scale_y_continuous(limits = c(0, 40000),
breaks = seq(0, 40000, 10000)) +
theme_bw()
ggplot(ukhls, aes(x = wave)) +
geom_bar(fill = "navy", stat = "count") +
labs(x = "Wave", y = "Count") +
scale_x_continuous(breaks = seq(1, 9, 1)) +
scale_y_continuous(limits = c(0, 40000), breaks = seq(0, 40000, 10000)) +
theme_bw()
ukhls <- mutate(ukhls, homeowner = ifelse(tenure == "Owner-occupied",
"Homeowner",
"Not homeowner"))
breaks <- quantile(ukhls$age, probs = seq(0, 1, 1/7), na.rm = TRUE)
ukhls <- mutate(ukhls, age_band = cut(age, breaks = breaks, labels = c("16-24", "25-34", "35-44", "45-54", "55-64", "65-74", "75-100"), right = TRUE))
wave1 <- filter(ukhls, wave == 1)
install.packages("sjPlot")
library(sjPlot)
library(dplyr)
table_result <- tab_xtab(var.row = ukhls$age_band,
var.col = ukhls$homeowner,
title = "Age Band vs. Homeownership",
show.cell.prc = TRUE,
show.row.prc = TRUE)
print(table_result)
ggplot(ukhls, aes(x = wave)) +
geom_bar(fill = "navy", stat = "count") +
labs(x = "Wave", y = "Count") +
scale_x_continuous(breaks = seq(1, 9, 1)) +
scale_y_continuous(limits = c(0, 40000), breaks = seq(0, 40000, 10000)) +
theme_bw()
table_result <- tab_xtab(var.row = ukhls$age_band,
var.col = ukhls$homeowner,
title = "Age Band vs. Homeownership",
show.cell.prc = TRUE,
show.row.prc = TRUE)
print(table_result)
table_result_2 <- tab_xtab(var.row = ukhls$degree,
var.col = ukhls$homeowner,
title = "Degree vs. Homeownership",
show.cell.prc = TRUE,
show.row.prc = TRUE)
print(table_result_2)
table_result_3 <- tab_xtab(var.row = ukhls$region,
var.col = ukhls$homeowner,
title = "Degree vs. Homeownership",
show.cell.prc = TRUE,
show.row.prc = TRUE)
print(table_result_3)
table_result_3 <- tab_xtab(var.row = ukhls$region,
var.col = ukhls$homeowner,
title = "Region vs. Homeownership",
show.cell.prc = TRUE,
show.row.prc = TRUE)
print(table_result_3)
ukhls <- mutate(ukhls, tag = ifelse(age <= 35 & homeowner == "Not homeowner" & wave == 1, 1, 0))
table(ukhls$tag)
ukhls <- mutate(ukhls, pidp = as.factor(pidp))
ukhls <- group_by(ukhls, pidp) %>% mutate(selector = max(tag))
sample <- filter(ukhls, selector == 1)
samplew5 <- filter(sample,  wave == 5)
crosstab(samplew5$degree, samplew5$homeowner,
prop.r = T, chisq = T, plot = F,
w = samplew5$weight5)
crosstab(samplew5$degree, samplew5$homeowner,
prop.r = T, chisq = T, plot = F,
w = samplew5$weight5)
binom.test(316, 1042, conf.level = .95)
binom.test(128, 1414, conf.level = .95)
binomresults <- data.frame(education = c("Degree", "No degree"),
estimate = c(0.303, 0.091),
lci = c(0.275, 0.076),
uci = c(0.332, 0.107))
ggplot(binomresults, aes(education, estimate)) +
geom_point(aes(colour = education, pch = education), size = 3) +
geom_errorbar(aes(ymin = lci, ymax = uci, colour = education)) +
labs(x = "Qualifications", y = "Probability of entering ownership by wave 5") +
scale_y_continuous(limits = c(0, 0.5), breaks = seq(0, .5, .1)) +
theme_bw()
model_sample <- filter(sample, wave == 1 | wave == 5)
model_sample <- mutate(model_sample, owner5 = lead(homeowner))
model_sample <- mutate(model_sample, owner5 = ifelse(owner5 == "Homeowner", 1, 0))
model_sample <- filter(model_sample, !is.na(owner5))
logit <- glm(formula = owner5 ~ degree, family = binomial(link = "logit"), data = model_sample)
summary(logit)
#add maritual status and region to the logistic regression
# Prepare variables if needed (e.g., recode and factorize)
model_sample$marital_status <- factor(model_sample$partner, levels = c("single", "married", "separated or divorced"))
# Fit the logistic regression model with additional predictors
logit <- glm(formula = owner5 ~ degree + income + partner + region,
family = binomial(link = "logit"), data = model_sample)
summary(logit)
table_result <- tab_xtab(var.row = ukhls$ethnicity,
var.col = ukhls$homeowner,
title = "Ethnicity vs. Homeownership",
show.cell.prc = TRUE,
show.row.prc = TRUE)
print(table_result)
table_result <- tab_xtab(var.row = ukhls$tenure,
var.col = ukhls$homeowner,
title = "Tenure vs. Homeownership",
show.cell.prc = TRUE,
show.row.prc = TRUE)
print(table_result)
table_result <- tab_xtab(var.row = ukhls$nkids,
var.col = ukhls$homeowner,
title = "Tenure vs. Homeownership",
show.cell.prc = TRUE,
show.row.prc = TRUE)
print(table_result)
breaks <- quantile(ukhls$income, probs = seq(0, 1, 1/7), na.rm = TRUE)
ukhls <- mutate(ukhls, income_band = cut(income, breaks = breaks, labels = c("1000.00-1099.99", "1100.00-1199.99", "1200.00-1299.99", "1300.00-1399.99", "1400.00-1499.99", "1500.00-1599.99", "1600.00+"), right = TRUE))
table_result <- tab_xtab(var.row = ukhls$income_band,
var.col = ukhls$homeowner,
title = "Income vs. Homeownership",
show.cell.prc = TRUE,
show.row.prc = TRUE)
print(table_result)
# Create necessary variables
ukhls <- ukhls %>%
mutate(homeowner = ifelse(tenure == "Owner-occupied", "Homeowner", "Not homeowner"),
age_band = cut(age, breaks = quantile(age, probs = seq(0, 1, 1/7), na.rm = TRUE),
labels = c("16-24", "25-34", "35-44", "45-54", "55-64", "65-74", "75-100"), right = TRUE),
income_band = cut(income, breaks = quantile(income, probs = seq(0, 1, 1/7), na.rm = TRUE),
labels = c("1000.00-1099.99", "1100.00-1199.99", "1200.00-1299.99", "1300.00-1399.99", "1400.00-1499.99", "1500.00-1599.99", "1600.00+"), right = TRUE),
tag = ifelse(age <= 35 & homeowner == "Not homeowner" & wave == 1, 1, 0),
pidp = as.factor(pidp)) %>%
group_by(pidp) %>%
mutate(selector = max(tag)) %>%
ungroup()
# Filter the sample for analysis based on specific criteria
sample <- ukhls %>%
filter(age <= 35, homeowner == "Not homeowner", wave == 1)
# Prepare the dataset for logistic regression by selecting samples from wave 1 and wave 5
model_sample <- sample %>%
filter(wave == 1 | wave == 5) %>%
mutate(owner5 = lead(homeowner),  # Shift homeowner status to align with wave 5 status
owner5 = ifelse(owner5 == "Homeowner", 1, 0)) %>%  # Convert to binary outcome
filter(!is.na(owner5))  # Ensure we only include cases with non-missing future homeowner status
# Ensure categorical variables are factors for the logistic regression model
model_sample$degree <- factor(model_sample$degree)
model_sample$partner <- factor(model_sample$partner, levels = c("single", "married", "separated or divorced"))
model_sample$region <- factor(model_sample$region)
# Fit the logistic regression model with the specified predictors
logit_model <- glm(owner5 ~ degree + income + partner + region,
family = binomial(link = "logit"),
data = model_sample)
# Check the number of levels for each factor variable
sapply(model_sample[c("degree", "partner", "region")], function(x) length(levels(x)))
# Fit the logistic regression model without 'degree' and 'region'
logit_model <- glm(owner5 ~ income + partner,
family = binomial(link = "logit"),
data = model_sample)
# Re-ensure that 'partner' is a correctly specified factor in 'model_sample'
model_sample$partner <- factor(model_sample$partner)
# If 'degree' and 'region' are to be included and have variability, ensure they're factors
model_sample$degree <- factor(model_sample$degree)
model_sample$region <- factor(model_sample$region)
# Verify the factor levels in 'model_sample'
table(model_sample$partner)
table(model_sample$degree)  # Only if it's included again
table(model_sample$region)  # Only if it's included again
# Check the number of rows in model_sample
nrow(model_sample)
# If model_sample is not empty, check the first few rows to understand its content
head(model_sample)
extended_logit <- glm(formula = owner5 ~ degree + income_band + nkids + ethnicity + age_band + region,
family = binomial(link = "logit"),
data = model_sample)
summary(factor(model_sample$degree))
summary(factor(model_sample$ethnicity))
summary(factor(model_sample$age_band))
summary(factor(model_sample$region))
model_sample$degree <- as.factor(model_sample$degree)
model_sample$ethnicity <- as.factor(model_sample$ethnicity)
model_sample$age_band <- as.factor(model_sample$age_band)
model_sample$region <- as.factor(model_sample$region)
str(model_sample)
model_sample <- ukhls %>%
filter(wave == 1, age_band %in% c("25-34", "35-44")) %>%
select(pidp, homeowner, degree, income_band, region, age_band) %>%
mutate(homeowner_binary = ifelse(homeowner == "Homeowner", 1, 0),
degree = as.factor(degree),
income_band = as.factor(income_band),
region = as.factor(region),
age_band = as.factor(age_band))
logit_model <- glm(homeowner_binary ~ degree + income_band + region + age_band,
family = binomial(link = "logit"),
data = model_sample)
summary(logit_model)
rm(binomresults, logit, logit_model, model_sample, sample, samplew5, table_result, table_result_2, table_result_3, ukhls, wave1)
rm(breaks)
